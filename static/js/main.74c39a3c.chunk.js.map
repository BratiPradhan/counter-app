{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","pervProps","prevState","counter","value","this","props","getBadgeClasses","formatCount","onClick","onIncrement","onDelete","id","classes","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.74c39a3c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\n// STATELESS FUNCTIONAL COMPONENT = sfc = short cut\r\n\r\n// we can use lifecycle hooks in only class components, we can't use lifecycle hooks in sfc\r\n\r\nconst NavBar = ({totalCounters}) => {\r\n    \r\n    console.log('NavBar - Rendered');\r\n\r\n    return ( \r\n        <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar \r\n        <span className=\"badge badge-pill badge-secondary\">{totalCounters}\r\n        </span>\r\n            </a>\r\n      </nav>\r\n       );\r\n\r\n};\r\n\r\n\r\n \r\nexport default NavBar;","// we use jsx instead of js because of more code completion\r\nimport React, { Component } from 'react';\r\nclass Counter extends Component {\r\n\r\n\r\n// with this life hook we can decide weather we should take an ajax call to uddate the new dta in the dom with the parameters provided\r\n\r\n    componentDidUpdate(pervProps, prevState) {\r\n        console.log('prevProps' , pervProps);\r\n        console.log('prevState', prevState);\r\n        if (pervProps.counter.value !== this.props.counter.value) {\r\n            // Ajax call and get new data from the server\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('Counter - Unmount');\r\n    }\r\n\r\n    /* state = {\r\n        value: this.props.counter.value\r\n       // imageUrl: 'https://picsum.photos/200'\r\n        // THIS WILL GENERATE A RANDOM 200/200 PIXEL IMAGE\r\n    }; */\r\n   /*  constructor(){\r\n        super();\r\n        this.handleIncrement = this.handleIncrement.bind(this);\r\n    } */\r\n   /*  renderTags() {\r\n        if (this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n        return <ul>\r\n        {this.state.tags.map(tag => <li key={tag}>{tag}</li>)} \r\n            </ul>;\r\n    } */\r\n    \r\n   /*  handleIncrement = product => {\r\n        console.log(product);\r\n        //this.state.count++; \r\n        // this is not going to work\r\n        this.setState({value: this.state.value + 1});\r\n        // this undefined in this method\r\n        // for every event handler like this, we have to create a constructor and a base constructor and bind the data\r\n    }; */\r\n    \r\n    \r\n    render() {\r\n\r\n        console.log('Counter- Rendered');\r\n\r\n    return ( \r\n    <div>\r\n        {/* {this.state.tags.length === 0 && \"Please create a new tag\"}\r\n        {this.renderTags()} */}\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button \r\n        onClick= {() => this.props.onIncrement(this.props.counter) // we are passing the reference to the counter object to make it more simple\r\n        }\r\n        //we don't call the handleIncrement in vanila javascript\r\n        className=\"btn btn-secondary btn-sm\">Increment\r\n        </button>\r\n        <button onClick={() => this.props.onDelete(this.props.counter.id)}\r\n         className=\"btn btn-danger btn-sm m-2\">Delete</button>\r\n \r\n        </div>\r\n        );\r\n            // we use <React.Fragment></React.Fragment> instead of <div></div> because , in the bwoser it will create two divs and we want only one div\r\n    }\r\n     getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const {value} = this.props.counter;\r\n        //OBJECT DESTRUCTURING\r\n        return value === 0 ? 'Zero' : value;\r\n    }\r\n \r\n}\r\nexport default Counter;\r\n\r\n \r\n\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\n\r\nclass Counters extends Component {\r\n    \r\n\r\n    render() { \r\n\r\n        console.log('Counters- Rendered');\r\n\r\n        const {onReset, counters, onDelete, onIncrement} = this.props;\r\n        \r\n        return ( <div>\r\n            <button \r\n            onClick={onReset}\r\n            className=\"btn btn-primary btn-sm m-2\">\r\n                Reset\r\n                </button>\r\n            {counters.map(counter => (\r\n                 <Counter\r\n                  key={counter.id} onDelete={onDelete} \r\n                  onIncrement={onIncrement}\r\n                  counter= {counter}\r\n                  // our counter object is carring all the information about the data, the value and id property or may be some other property should be defined under this. In counter.jsx it will be counter.value and counter.id\r\n\r\n                 />\r\n            ))}\r\n        </div> \r\n        );\r\n    }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\nimport './App.css';\n\nclass App extends Component {\n  state = { \n    counters: [\n        {id: 1, value: 4},\n        {id: 2, value: 0},\n        {id: 3, value: 0},\n        {id: 4, value: 0}\n    ]\n };\n\n\n // LIFE CYCLE HOOK\n constructor() {\n   super();\n   console.log(\"App - Constructor\");\n   // constructor is called once and its the right place to initialize the properties in this class\n // we dont add setState to constructor, we will pass props as parameter in both constructor(props) and super(props)\n // setState() is only called when a component is rendered and placed in the dom\n  }\n \n  componentDidMount() {\n    // this method is called after our component is rendered into the dom and it's perfect place to make ajax calls to get data from the server\n    // Ajax call\n    //this.setState({movie})\n    // futher we need to add list of movies from server and pass that to setState() method\n\n    console.log('App-Mounted');\n  }\n\n\n\n handleIncrement = counter => {\n     const counters =[...this.state.counters];\n     // three dots(...) represents cloning with the counters object in state of counters\n     const index = counters.indexOf(counter);\n     counters[index]  = {...counter};\n     counters[index].value++;\n     this.setState({counters});\n };\n\n\n\n\n\n handleReset = () => {\n    const counters = this.state.counters.map(c => {\n         c.value = 0;\n         return c;\n     });\n     this.setState({counters});\n };\n handleDelete = counterId => {\nconst counters = this.state.counters.filter(c => c.id !==  counterId);\nthis.setState({counters});\n// setState({counters: counters}) , since the the key and value are same , we can edit it to counters\n};\n\n\n  render() {\n\n    console.log('App-Rendered');\n\n    return (\n      <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length} \n      />\n      <main className=\"container\">\n        <Counters \n        counters={this.state.counters}\n        onReset={this.handleReset} \n        onIncrement={this.handleIncrement} \n        onDelete={this.handleDelete}\n        />\n      </main>\n      </React.Fragment>\n      \n\n    );\n\n  }\n}   \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n// Counter is a default expert, so we don't need curly brackets around it\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}